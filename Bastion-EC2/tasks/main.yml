
# [ EC2 Instance - Create Block ]
- name: Get VPC info (VPC 정보 Import)
  amazon.aws.ec2_vpc_net_info:
    region: "{{ region }}"
    filters:
      "tag:Name": project3-vpc
  register: vpc_info
  when: ec2_instance_state == "present"

- name: Check VPC info after creation (조건에 의한 subnet ID 추출)
  amazon.aws.ec2_vpc_subnet_info:
    region: "{{ region }}"
    filters:
      "tag:Name": project3-public-2a
      vpc-id: "{{ vpc_info.vpcs[0].vpc_id }}"
  register: subnet_info
  when: ec2_instance_state == "present"

- name: Debug VPC Info (추출한 VPC 정보 출력)
  ansible.builtin.debug:
    var: vpc_info
  when: ec2_instance_state == "present"

- name: Debug subnet ID (추출한 서브넷 ID 출력)
  ansible.builtin.debug:
    var: subnet_info.subnets[0].subnet_id
  when: ec2_instance_state == "present"

- name: Create Bastion EC2 (Bastion EC2 인스턴스 생성)
  amazon.aws.ec2_instance:
    name: "{{ bastion_instance_name }}"
    key_name: "{{ key }}"
    instance_type: "{{ bastion_instance_type }}"
    image_id: "{{ ami_id }}"
    region: "{{ region }}"
    vpc_subnet_id: "{{ subnet_info.subnets[0].subnet_id }}"
    security_group: "{{ security_group_id }}"
    network:
      assign_public_ip: true
    wait: true
    tags:
      Name: project3-bastion
    state: running
  register: bastion_info
  when: ec2_instance_state == "present"

- name: Wait for Bastion SSH (TCP/22번 포트 사용 가능까지 대기)
  ansible.builtin.wait_for:
    host: "{{ bastion_info.instances[0].public_ip_address }}"
    port: 22
    timeout: 60
    state: started
  when: ec2_instance_state == "present"

- name: Copy PEM key to Bastion (SCP로 PEM 키 전송)
  ansible.builtin.shell: >
    scp -i ~/.ssh/project3-key.pem \
    -o StrictHostKeyChecking=no \
    ~/.ssh/project3-key.pem \
    ubuntu@{{ bastion_info.instances[0].public_ip_address }}:/home/ubuntu/.ssh/project3-key.pem
  register: bastion_key_copy
  become: false
  when: ec2_instance_state == "present"

- name: Set permission on PEM key (Bastion EC2에서 PEM 키 권한 설정)
  ansible.builtin.shell: sudo chmod 400 /home/ubuntu/.ssh/project3-key.pem
  delegate_to: "{{ bastion_info.instances[0].public_ip_address }}"
  vars:
    ansible_user: ubuntu
    ansible_ssh_private_key_file: "{{ lookup('env', 'PEM_KEY_PATH') }}"
  when: ec2_instance_state == "present"

- name: Print Bastion SSH access info(Bastion EC2 SSH 접속 정보 출력)
  ansible.builtin.debug:
    msg: |
      =============================================
      ✅ Bastion EC2 is running and ready
      ➤ Connect with:
        ssh -i ~/.ssh/{{ key }}.pem ubuntu@{{ bastion_info.instances[0].public_ip_address }}
      =============================================
  when: ec2_instance_state == "present"


# [ EC2 Instance - Terminate Block ]
- name: Get Bastion EC2 info for termination
  amazon.aws.ec2_instance_info:
    region: "{{ region }}"
    filters:
      "tag:Name": "{{ bastion_instance_name }}"
  register: bastion_lookup
  when: ec2_instance_state == "absent"

- name: Delete Bastion EC2
  amazon.aws.ec2_instance:
    instance_ids: "{{ bastion_lookup.instances | map(attribute='instance_id') | list }}"
    region: "{{ region }}"
    state: absent
    wait: true
  when: ec2_instance_state == "absent"

